package com.example.drools.droolsUtils;

import com.example.drools.model.Condition;
import com.example.drools.model.Rule;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.kie.api.runtime.StatelessKieSession;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.UUID;

/**
 * The {@code SessionProvider} class acts as a coordinator that utilizes {@link RuleFactory}, {@link DRLGenerator},
 * and {@link KieSessionManager} to create and manage Drools sessions based on dynamic rules.
 * <p>
 * It initializes default sessions upon application startup and provides methods to add new sessions as needed.
 * </p>
 * <p>
 * This class uses Lombok's {@link RequiredArgsConstructor} to automatically generate a constructor that initializes
 * the required fields: {@link #ruleFactory}, {@link #drlGenerator}, and {@link #kieSessionManager}.
 * </p>
 * <p>
 * Note: The default constructor is generated by Lombok's {@link RequiredArgsConstructor} and is used by Spring
 * to inject the dependencies. It is not explicitly defined in the code.
 * </p>
 */
@Service
@Log4j2
public class SessionProvider {

    /**
     * Factory for creating {@link Rule} objects.
     */
    private final RuleFactory ruleFactory;

    /**
     * Generator for creating DRL strings from {@link Rule} objects.
     */
    private final DRLGenerator drlGenerator;

    /**
     * Manager for creating and managing Drools sessions.
     */
    private final KieSessionManager kieSessionManager;

    /**
     * Constructor for {@code SessionProvider}.
     * <p>
     * This constructor is used to inject the required dependencies.
     * </p>
     *
     * @param ruleFactory the factory for creating {@link Rule} objects
     * @param drlGenerator the generator for creating DRL strings from {@link Rule} objects
     * @param kieSessionManager the manager for creating and managing Drools sessions
     */
    public SessionProvider(RuleFactory ruleFactory, DRLGenerator drlGenerator, KieSessionManager kieSessionManager) {
        this.ruleFactory = ruleFactory;
        this.drlGenerator = drlGenerator;
        this.kieSessionManager = kieSessionManager;
    }

    /**
     * Initializes the {@code SessionProvider} by creating default rules and sessions.
     * <p>
     * This method is executed after the bean's construction and sets up initial Drools sessions.
     * </p>
     */
    @PostConstruct
    public void init() {
        Condition defaultCondition = new Condition(UUID.randomUUID(),
                "(alter >= 123) || (lokation.strasse == \"Paulinzeller\")");
        Rule defaultRule = ruleFactory.createRule(defaultCondition);

        if (defaultRule != null) {
            List<Rule> rules = Collections.singletonList(defaultRule);
            String drl = drlGenerator.generateDRL(rules);
            StatelessKieSession session = kieSessionManager.createSession(drl);
            kieSessionManager.addSession(session);
            log.info("Initialized default Kie session with rule ID: {}", defaultRule.getName());
        } else {
            log.warn("Default rule creation failed. No session initialized.");
        }
    }

    /**
     * Creates and adds a new {@link StatelessKieSession} based on the provided {@link Condition}.
     *
     * @param condition the condition used to create a new rule and session
     * @return the created {@link StatelessKieSession} if successful; {@code null} otherwise
     */
    public StatelessKieSession createAndAddSession(Condition condition) {
        Rule rule = ruleFactory.createRule(condition);
        if (rule != null) {
            List<Rule> rules = Collections.singletonList(rule);
            String drl = drlGenerator.generateDRL(rules);
            StatelessKieSession session = kieSessionManager.createSession(drl);
            kieSessionManager.addSession(session);
            log.info("Created and added new Kie session with rule ID: {}", rule.getName());
            return session;
        } else {
            log.warn("Failed to create rule from condition: {}", condition);
            return null;
        }
    }

    /**
     * Clears all active {@link StatelessKieSession} instances managed by this provider.
     */
    public void clearAllSessions() {
        kieSessionManager.clearSessions();
        log.info("All Kie sessions have been cleared.");
    }
}